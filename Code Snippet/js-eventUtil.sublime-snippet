<snippet>
	<content><![CDATA[
var eventUtil = {

    /**
     * [addHandler 绑定事件]
     * @param {[Object]}   e       [事件对象]
     * @param {[String]}   type    [事件类型]
     * @param {[Function]} handler [回调函数]
     */
    addHandler:function(e,type,handler){
        if(e.addEventListener){
            e.addEventListener(type,handler,false);
        }else if(e.attachEvent){
            e.attachEvent('on' + type,handler);
        }else{
            e['on' + type] = handler;
        }
    },

    /**
     * [removeHandler 解绑事件]
     * @param  {[Object]}   e       [事件对象]
     * @param  {[String]}   type    [事件类型]
     * @param  {[Function]} handler [回调函数]
     */
    removeHandler:function(e,type,handler){
        if(e.removeEventListener){
            e.removeEventListener(type,handler,false);
        }else if(e.detachEvent){
            e.detachEvent('on' + type,handler);
        }else{
            e['on' + type] = null;
        }
    },

    // 获取事件对象
    getEvent:function(event){
        return e ? event : window.event;
    },

    // 获取事件类型
    getType:function(e){
        return e.type
    },

    // 获取事件元素
    getElement:function(e){
        return e.target || e.srcElement;
    },

    // 阻止事件默认行为
    preventDefault:function(e){
        if(e.preventDefault){
            e.preventDefault();
        }else{
            e.returnValue = false;
        }
    },

    // 阻止事件冒泡
    stopPropagation:function(e){
        if(e.stopPropagation){
            e.stopPropagation();
        }else{
            e.cancelBubble = true;
        }
    }
}

${1}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>js.eventUtil</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.js</scope>
</snippet>
